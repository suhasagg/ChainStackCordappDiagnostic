buildscript {
    ext {
        corda_release_group = 'net.corda'
        corda_release_version = '4.3-RC02'
        corda_gradle_plugins_version = '4.0.45'
        junit_version = '4.12'
        quasar_version = '0.7.10'
        spring_boot_version = '2.0.2.RELEASE'
        spring_boot_gradle_plugin_version = '2.0.2.RELEASE'
        slf4j_version = '1.7.25'
        log4j_version = '2.11.2'
        corda_platform_version = '4'.toInteger()
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://software.r3.com/artifactory/corda' }
    }

    dependencies {
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version"
    }
}

allprojects {
    apply plugin: 'java'

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url 'https://software.r3.com/artifactory/corda' }
        maven { url 'https://jitpack.io' }
        maven { url 'https://repo.gradle.org/gradle/libs-releases-local' }
        maven { url 'https://mvnrepository.com/artifact' }

    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-parameters" // Required by Corda's serialisation framework.
    }

    jar {
        // This makes the JAR's SHA-256 hash repeatable.
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
}


apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

cordapp {
    info {
        name "CorDapp"
        vendor "Corda Open Source"
        targetPlatformVersion corda_platform_version
        minimumPlatformVersion corda_platform_version
    }
}

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
}

dependencies {
    testCompile "junit:junit:$junit_version"
    testCompile "$corda_release_group:corda-test-utils:$corda_release_version"
    testCompile "$corda_release_group:corda-node-driver:$corda_release_version"

    // Corda dependencies.
    cordaCompile "$corda_release_group:corda-core:$corda_release_version"
    cordaCompile "$corda_release_group:corda-node-api:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"

    // CorDapp dependencies.
    cordapp project(":cordapp")
    cordapp project(":cordapp-contracts-states")

    cordaCompile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    cordaCompile "org.apache.logging.log4j:log4j-web:${log4j_version}"
    cordaCompile "org.slf4j:jul-to-slf4j:$slf4j_version"

}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    directory "./build/nodes"
    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating: false]
        p2pPort 10002
        rpcSettings {
            useSsl false
            address("localhost:10003")
            adminAddress("localhost:10043")
        }
        cordapps = [
                "$project.group:cordapp-contracts-states:$project.version",
                "$project.group:cordapp:$project.version"
        ]
    }
    node {
        name "O=PartyA,L=London,C=GB"
        p2pPort 10005
        rpcSettings {
            useSsl false
            address("localhost:10006")
            adminAddress("localhost:10046")
        }
        cordapps = [
                "$project.group:cordapp-contracts-states:$project.version",
                "$project.group:cordapp:$project.version"
        ]
        rpcUsers = [[user: "bluefrog", "password": "test", "permissions": ["ALL"]]]
        node {
            name "O=PartyB,L=New York,C=US"
            p2pPort 10008
            rpcSettings {
                useSsl false
                address("localhost:10009")
                adminAddress("localhost:10049")
            }
            cordapps = [
                    "$project.group:cordapp-contracts-states:$project.version",
                    "$project.group:cordapp:$project.version"
            ]
            rpcUsers = [[user: "bluefrog", "password": "test", "permissions": ["ALL"]]]
        }
    }

    task installQuasar(type: Copy) {
        destinationDir rootProject.file("lib")
        from(configurations.quasar) {
            rename 'quasar-core(.*).jar', 'quasar.jar'
        }
    }
}